package com.kantu.demo;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.jacob.activeX.ActiveXComponent;
import com.jacob.com.Variant;

import javax.swing.*;
import java.awt.*;

/**
 * Created by lysakaleksey on 12/01/17.
 */
public class MainApp extends JFrame {
    private final StringBuilder logBuffer = new StringBuilder();
    public JPanel mainPanel;
    private JButton btnRunKantu;
    private JTextField scriptField;
    private JTextArea logsArea;

    private MainApp() {
        setTitle("Kantu API - Java Demo V1.0");
        setContentPane(mainPanel);
        setResizable(false);
        pack();
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        btnRunKantu.addActionListener(e -> {
            try {
                log("Starting Kantu Browser");
                String myScript = scriptField.getText();
                ActiveXComponent kantu = new ActiveXComponent("Kantu");

                //open the Kantu Browser. With kantu.open(false) you can connect to an already open instance
                Variant result = kantu.invoke("open", new Variant(true));
                if (result.getInt() < 0) {
                    log("Kantu Open Error: " + result + " Text: " + getLastError(kantu));
                }

                kantu.invoke("echo", new Variant("Hello from the Java app: " + myScript));
                log("Start Script " + myScript);

                result = kantu.invoke("play", new Variant(myScript));
                if (result.getInt() < 0) {
                    log("Script Replay Error: " + result + " Text: " + getLastError(kantu));
                } else {
                    log("Script completed - OK");
                }

                kantu.invoke("echo", new Variant("Done"));

                log("Closing Kantu Browser ...");
                kantu.invoke("close");
            } catch (Exception ex) {
                log("An exception occurred " + ex.getMessage());
                ex.printStackTrace();
            }
        });
    }

    private String getLastError(ActiveXComponent kantu) {
        return kantu.invoke("getLastError").toString();
    }

    private void log(String message) {
        logBuffer.append(message).append("\n");
        logsArea.setText(logBuffer.toString());
        logsArea.update(logsArea.getGraphics()); // revalidate logs on form
    }

    public static void main(String[] args) {
        new MainApp().setVisible(true);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(3, 3, new Insets(15, 15, 15, 15), -1, -1));
        mainPanel.setMinimumSize(new Dimension(500, 400));
        mainPanel.setPreferredSize(new Dimension(500, 400));
        btnRunKantu = new JButton();
        btnRunKantu.setActionCommand("");
        btnRunKantu.setText("Run Kantu");
        mainPanel.add(btnRunKantu, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Script:");
        mainPanel.add(label1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        scriptField = new JTextField();
        scriptField.setText("Demo-Automate-Forms");
        scriptField.setToolTipText("File name without extension. File must be present in '<Current User>\\Documents\\Kantu\\macros' folder");
        mainPanel.add(scriptField, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Log");
        mainPanel.add(label2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        mainPanel.add(scrollPane1, new GridConstraints(2, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        logsArea = new JTextArea();
        logsArea.setEditable(false);
        logsArea.setEnabled(true);
        logsArea.setLineWrap(true);
        logsArea.setOpaque(true);
        scrollPane1.setViewportView(logsArea);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }
}
